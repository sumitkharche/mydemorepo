# This workflow will build a .NET Core project and deploy it to an Azure Functions App on Windows or Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-csharp?tabs=in-process
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy Azure Function App

on:
  workflow_dispatch:
  pull_request:
    branches:
      - develop
      - 'release-*'

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
  DOTNET_VERSION: '8.0.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')

jobs:
  build:
    runs-on: windows-latest # For Linux, use ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: pwsh # For Linux, use bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --property:OutputPath=./output
        popd
        
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4.3.1
      with:
        name: function-app
        path: ./output
    - name: Debug Information
      run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Pull Request Merged: ${{ github.event.pull_request.merged }}"
          echo "Target Ref: ${{ github.event.pull_request.target.ref }}"
  deploy-to-dev:
   runs-on: windows-latest # For Linux, use ubuntu-latest
   environment: dev
   needs: build
   if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.target.ref == 'develop') || (github.ref == 'refs/heads/develop')
   steps:
    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.4
      with:
        name: function-app
    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: reporting-func-demo
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} # Remove publish-profile to use Azure  

  deploy-to-prod:
   runs-on: windows-latest # For Linux, use ubuntu-latest
   environment: PROD
   needs: build
   if: github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/heads/release')
   steps:
    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.4
      with:
        name: function-app
    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: reporting-func-demoprod
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} # Remove publish-profile to use Azure  
